# Kinesis Video Stream name. If a stream by the given name doesn't exist, it will be created.
stream_name: "testStream"

# Topic name to subscribe and receive the image/video data from.
subscription_topic: /video/encoded

# Topic type
  # 1: KinesisVideoFrame transport, enabling h264 streaming
  # 2: sensor_msgs::Image transport.
  # 3: Like 1 but with AWS Rekognition support built-in. Results will be read from 'rekognition_data_stream' and published onto 'rekognition_topic_name'.
topic_type: 1

#### If topic_type is 3, we expect the following parameters.
### The Kinesis Data Stream from which to read Rekognition's analysis results.
# rekognition_data_stream: "kinesis-sample"
### The ROS topic on which to publish the results.
# rekognition_topic_name: "/rekognition/results"

# Frame rate should match the encoder's (and the camera's) frame rate.
frame_rate: 30

# Rather than using the input's timestamps, let the Producer SDK create timestamps as the frames arrive.
frame_timecodes: false

# This is the AWS Client Configuration used by the AWS service client in the Node. If given the node will load the
# provided configuration when initializing the client.
aws_client_configuration:
  # Specifies where you want the client to communicate. Examples include us-east-1 or us-west-1. You must ensure that
  # the service you want to use has an endpoint in the region you configure.
  region: "us-west-2"

  # Built in the constructor and pulls information from your operating system. Do not alter the user agent.
  #userAgent: ""

  # Use this to override the http endpoint used to talk to a service. If you set this, you must also set authenticationRegion.
  #endpointOverride: ""

  # These settings allow you to configure a proxy for all communication with AWS. Examples of when this functionality
  # might be useful include debugging in conjunction with the Burp suite, or using a proxy to connect to the Internet.
  #proxyHost: ""
  #proxyPort: 0
  #proxyUserName: ""
  #proxyPassword: ""

  # Enables you to tell the HTTP client where to find your SSL certificate trust store (for example, a directory
  # prepared with OpenSSL's c_rehash utility). You shouldn't need to do this unless you are using symlinks in your
  # environment. This has no effect on Windows or OS X.
  #caPath: ""
  #caFile: ""

  # Values that determine the length of time, in milliseconds, to wait before timing out a request. You can increase
  # this value if you need to transfer large files, such as in Amazon S3 or Amazon CloudFront.
  connect_timeout_ms: 9000
  request_timeout_ms: 9000
  # The maximum number of allowed connections to a single server for your HTTP communications. The default value is 25.
  # You can set this value as high as you can support the bandwidth. We recommend a value around 25.
  #maxConnections: 25


  # Use dual stack endpoint in the endpoint calculation. You must ensure that the service you want to use supports ipv6 in the region you select.
  #useDualStack: false

  # Enable adjustment for clock skew
  #enableClockSkewAdjustment: true

  # If set to true the http stack will follow redirect codes
  #followRedirects: false

  # Specifies whether to enable SSL certificate verification. If necessary, you can disable SSL certificate verification by setting verifySSL to false.
  #verifySSL: true

  # The number of retries for connecting to AWS Services
  max_retries: 10